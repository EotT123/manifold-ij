<idea-plugin>
  <id>manifold.ij</id>
  <name>Manifold</name>
  <description>
    <![CDATA[
      <table>
        <tr>
          <td><h2>What is Manifold?</h2></td>
        </tr>

        <tr>
          <td>
            <a href="http://manifold.systems">Manifold</a> is a new breed of Java tooling. It provides powerful
            features to make Java development more appealing and productive. Simply add the Manifold jar to your project and
            begin taking advantage of it.
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h2>What can you do with Manifold?</h2></td>
        </tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html#manifold-in-a-nutshell">Meta-programming</a></h3>
            <p>
              Gain direct, type-safe access to structured data. Eliminate code generators. Minimize build time.
            </p>
            <code>
              &nbsp;&nbsp;<i>//&nbsp;JSON files are types!</i><br>
              &nbsp;&nbsp;<b>Person</b>&nbsp;person&nbsp;=&nbsp;<b>Person</b>.fromJsonUrl(url);<br>
              &nbsp;&nbsp;person.setFirstName("Scott");
            </code>
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html#the-extension-manifold">Extensions</a></h3>
            <p>Add extension methods and interfaces to existing Java classes, even String, List, and File. Eliminate
              boilerplate
              code.</p>
            <code>
              &nbsp;&nbsp;<b>String</b>&nbsp;greeting&nbsp;=&nbsp;"hello";<br>
              &nbsp;&nbsp;greeting.myMethod();&nbsp;<i>//&nbsp;augment&nbsp;any&nbsp;type</i>
            </code>
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html#structural-interfaces">Structural Typing</a></h3>
          <p>Unify disparate APIs. Bridge software components you do not control. Access maps through type-safe
            interfaces.</p>
          <code>
            &nbsp;&nbsp;<b>MyInterface</b>&nbsp;thing&nbsp;=&nbsp;(<b>MyInterface</b>)notMyInterface;<br>
            &nbsp;&nbsp;thing.myMethod();&nbsp;<i>//&nbsp;treat&nbsp;as&nbsp;your&nbsp;interface</i>
          </code>
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html#jailbreak">Type-safe Reflection</a></h3>
          <p>Access private features with <b>@Jailbreak</b> to avoid the drudgery and vulnerability of Java reflection.</p>
          <code>
            &nbsp;&nbsp;<b>@Jailbreak</b>&nbsp;Foo&nbsp;foo&nbsp;=&nbsp;<b>new</b>&nbsp;Foo();<br>
            &nbsp;&nbsp;<i>//&nbsp;Direct,&nbsp;type-safe&nbsp;access&nbsp;to&nbsp;*all*&nbsp;foo's&nbsp;members</i><br>
            &nbsp;&nbsp;foo.privateMethod(x, y, z);&nbsp;<br>
            &nbsp;&nbsp;foo.privateField = value;&nbsp;
          </code>
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html#templating">Templates</a></h3>
          <p>Make type-safe, templatized data files using pure Java. Use the same template expressions in Java strings.</p>
          <code>
            &nbsp;&nbsp;<b>int</b>&nbsp;hour&nbsp;=&nbsp;<i>8</i>;<br>
            &nbsp;&nbsp;<i>//&nbsp;"It&nbsp;is&nbsp;8&nbsp;o'clock"</i><br>
            &nbsp;&nbsp;<b>String</b>&nbsp;time&nbsp;=&nbsp;"It&nbsp;is&nbsp;<b>$</b><i>hour</i>&nbsp;o'clock";&nbsp;
          </code>
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html#extension-libraries">Libraries</a></h3>
          <p>Leverage stock Manifold extension libraries for standard Java classes. Save time and reduce boilerplate code.</p>
          <code>
            &nbsp;&nbsp;<b>File</b>&nbsp;file&nbsp;=&nbsp;new <b>File</b>(path);<br>
            &nbsp;&nbsp;<i>//&nbsp;Use refreshing extensions to File</i><br>
            &nbsp;&nbsp;<b>String</b>&nbsp;content&nbsp;=&nbsp;file.readText();&nbsp;
          </code>
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html#working-with-intellij">IntelliJ</a></h3>
          <p>Use the Manifold IntelliJ IDEA plugin to fully leverage Manifold in your development cycle. The plugin provides
            comprehensive support for IntelliJ features including code completion, navigation, usage searching, refactoring,
            incremental compilation, hotswap debugging, full-featured template editing, and more.</p>
          </td>
        </tr>

        <tr><td><p></p></td></tr>

        <tr>
          <td><h3><a href="http://manifold.systems/docs.html">Learn More</a></h3></td>
        </tr>
      </table>
    ]]>
  </description>
  <version>This value is patched by the build script</version>
  <vendor email="admin@manifold.systems" url="http://manifold.systems">manifold.systems</vendor>
  <!-- please see http://confluence.jetbrains.com/display/IDEADEV/Build+Number+Ranges for description -->
  <idea-version since-build="This value is patched by the build script"/>

  <actions>
    <group id="Manifold.New">
      <action id="Manifold.NewExtensionClass" class="manifold.ij.actions.CreateExtensionMethodsClassAction"/>
      <action id="Manifold.NewTemplate" class="manifold.ij.actions.CreateManifoldTemplateAction"/>
      <add-to-group group-id="NewGroup1" anchor="last"/>
    </group>
  </actions>

  <application-components>
    <component>
      <implementation-class>manifold.ij.core.ManApplicationComponent</implementation-class>
    </component>
  </application-components>

  <project-components>
    <component>
      <implementation-class>manifold.ij.core.ManProjectComponent</implementation-class>
    </component>
  </project-components>

  <extensions defaultExtensionNs="com.intellij">
    <repositoryLibrary name="Manifold">
      <groupId>systems.manfold</groupId>
      <artifactId>manifold-all</artifactId>
    </repositoryLibrary>


    <!-- Manifold Core extensions -->

    <!--<projectService serviceInterface="com.intellij.psi.impl.ResolveScopeManager"-->
                    <!--serviceImplementation="manifold.ij.extensions.ManResolveScopeManagerImpl" overrides="true"/>-->
    <projectService serviceInterface="com.intellij.psi.search.PsiSearchHelper"
                    serviceImplementation="manifold.ij.extensions.ManPsiSearchHelperImpl" overrides="true"/>

    <projectService serviceInterface="com.intellij.psi.PsiResolveHelper"
                    serviceImplementation="manifold.ij.extensions.ManPsiResolveHelperImpl" overrides="true"/>
    <projectService serviceInterface="com.intellij.psi.impl.source.resolve.ResolveCache"
                    serviceImplementation="manifold.ij.extensions.ManResolveCache" overrides="true"/>

    <!--<library.type implementation="manifold.ij.extensions.ManLibraryType"/>-->
    <frameworkSupport implementation="manifold.ij.extensions.ManSupportProvider"/>
    <framework.type implementation="manifold.ij.extensions.ManFrameworkType"/>
    <java.elementFinder implementation="manifold.ij.extensions.ManTypeFinder" order="first, before java"/>
    <java.shortNamesCache implementation="manifold.ij.extensions.ManShortNamesCache"/>
    <gotoDeclarationHandler implementation="manifold.ij.extensions.ManGotoDeclarationHandler"/>
    <lang.psiAugmentProvider implementation="manifold.ij.extensions.ManAugmentProvider"/>
    <methodReferencesSearch implementation="manifold.ij.extensions.ExtensionMethodUsageSearcher"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.ExtensionClassAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.ExtensionMethodCallSiteAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.SelfUsageAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.extensions.JailbreakUsageAnnotator"/>
    <daemon.highlightInfoFilter implementation="manifold.ij.extensions.ManHighlightInfoFilter"/>
    <renamePsiElementProcessor implementation="manifold.ij.extensions.RenameTypeManifoldFileProcessor" order="first"/>
    <moveFileHandler implementation="manifold.ij.extensions.MoveTypeManifoldFileProcessor" order="first"/>
    <findUsagesHandlerFactory implementation="manifold.ij.extensions.ManifoldFindUsagesHandlerFactory" order="first"/>
    <lang.findUsagesProvider language="TEXT" implementationClass="manifold.ij.extensions.TextFindUsagesProvider"/>
    <renameHandler implementation="manifold.ij.extensions.ManRenameHandler" order="first"/>
    <renamePsiElementProcessor implementation="manifold.ij.extensions.RenameResourceElementProcessor" order="first"/>
    <renamePsiElementProcessor implementation="manifold.ij.extensions.RenameExtensionMethodProcessor" order="first"/>
    <resolveScopeEnlarger implementation="manifold.ij.extensions.ManResolveScopeProvider" order="first"/>
    <elementDescriptionProvider implementation="manifold.ij.extensions.ManElementDescriptionProvider"/>
    <languageInjector implementation="manifold.ij.extensions.ManStringLiteralTemplateInjector" order="first"/>
    <targetElementEvaluator language="TEXT" implementationClass="manifold.ij.extensions.ManTextElementEvaluator"/>
    <completion.contributor language="JAVA" implementationClass="manifold.ij.extensions.ManJavaCompletionContributor" order="first"/>

    <!-- ManJavaSyntaxHighlighterFactory exists solely so we can include '$' as an escapable for String literal templates
         see ManJavaFileHighlighter -->
    <lang.syntaxHighlighterFactory language="JAVA" implementationClass="manifold.ij.extensions.ManJavaSyntaxHighlighterFactory" order="first"/>

    <!-- This enables the ManBuilderService and dynamically configures the classpath (includes manifold-jps-plugin.jar etc.) -->
    <buildProcess.parametersProvider implementation="manifold.ij.jps.ManBuildClasspathProvider"/>
    <compileServer.plugin classpath=""/>

    <!-- Manifold Template extensions -->

    <fileTypeFactory implementation="manifold.ij.template.ManTemplateFileTypeFactory"/>
    <lang.parserDefinition language="ManTemplateJava" implementationClass="manifold.ij.template.psi.ManTemplateJavaParserDefinition"/>
    <lang.treePatcher language="ManTemplateJava" implementationClass="manifold.ij.template.ManTreePatcher"/>
    <lang.parserDefinition language="ManTL" implementationClass="manifold.ij.template.psi.ManTemplateParserDefinition"/>
    <lang.syntaxHighlighterFactory language="ManTL" implementationClass="manifold.ij.template.ManTemplateHighlighterFactory"/>
    <lang.fileViewProviderFactory language="ManTL" implementationClass="manifold.ij.template.ManTemplateFileViewProviderFactory" order="first"/>
    <annotator language="ManTL" implementationClass="manifold.ij.template.ManTemplateAnnotator"/>
    <annotator language="JAVA" implementationClass="manifold.ij.template.ManTemplateJavaAnnotator"/>
    <daemon.highlightInfoFilter implementation="manifold.ij.template.ManTemplateHighlightInfoFilter"/>
    <colorSettingsPage implementation="manifold.ij.template.ManTemplateColorSettingsPage"/>
    <lang.commenter language="ManTL" implementationClass="manifold.ij.template.ManTemplateCommenter"/>
    <typedHandler implementation="manifold.ij.template.ManTemplateTypedHandler"/>
    <enterHandlerDelegate implementation="manifold.ij.template.psi.ManTemplateEnterHandler"/>
  </extensions>

</idea-plugin>
